    1、对象导航查询
        a、查询一个对象的同时，通过此对象查询他的关联对象
        b、案例：
            客户和联系人
        c、代码：
            //测试对象导航查询（查询一个对象的时候，通过此对象查询所有的关联对象）
            @Test
            @Transactional // 解决在java代码中的no session问题
            public void  testQuery1() {
                //查询id为1的客户
                Customer customer = customerDao.findOne(1l);
                //对象导航查询，此客户下的所有联系人
                Set<LinkMan> linkMans = customer.getLinkMans();

                for (LinkMan linkMan : linkMans) {
                    System.out.println(linkMan);
                }
            }

    2、对象导航查询--延迟加载：
        **
         * 对象导航查询：
         *      默认使用的是延迟加载的形式查询的
         *          调用get方法并不会立即发送查询，而是在使用关联对象的时候才会差和讯
         *      延迟加载！
         * 修改配置，将延迟加载改为立即加载
         *      fetch，需要配置到多表映射关系的注解上
         *
         */

          在customer中：
          @OneToMany(mappedBy = "customer",cascade = CascadeType.ALL,fetch = FetchType.EAGER)
          * fetch : 配置关联对象的加载方式
          *          EAGER   ：立即加载   ---不推荐使用
          *          LAZY    ：延迟加载

    3、从联系人对象导航查询他的所属客户：
        /**
         * 从联系人对象导航查询他的所属客户
         *      * 默认 ： 立即加载
         *      延迟加载：
         *           在目标对象中添加fetch
         *
         */
        @Test
        @Transactional // 解决在java代码中的no session问题
        public void  testQuery3() {
            LinkMan linkMan = linkManDao.findOne(2l);
            //对象导航查询所属的客户
            Customer customer = linkMan.getCustomer();
            System.out.println(customer);
        }

        在linkman中：
        @ManyToOne(targetEntity = Customer.class,fetch = FetchType.LAZY)
        * fetch : 配置关联对象的加载方式
        *          EAGER   ：立即加载   ---不推荐使用
        *          LAZY    ：延迟加载



    4、总结：
            从一方查询多方
                * 默认：使用延迟加载（****）

            从多方查询一方
                * 默认：使用立即加载
